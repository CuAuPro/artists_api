# coding: utf-8

"""
    Simple API

    A simple API to illustrate OpenAPI concepts  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Artist(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artist_name': 'str',
        'artist_genre': 'str',
        'albums_recorded': 'int',
        'username': 'str'
    }

    attribute_map = {
        'artist_name': 'artist_name',
        'artist_genre': 'artist_genre',
        'albums_recorded': 'albums_recorded',
        'username': 'username'
    }

    def __init__(self, artist_name=None, artist_genre=None, albums_recorded=None, username=None):  # noqa: E501
        """Artist - a model defined in Swagger"""  # noqa: E501
        self._artist_name = None
        self._artist_genre = None
        self._albums_recorded = None
        self._username = None
        self.discriminator = None
        if artist_name is not None:
            self.artist_name = artist_name
        if artist_genre is not None:
            self.artist_genre = artist_genre
        if albums_recorded is not None:
            self.albums_recorded = albums_recorded
        self.username = username

    @property
    def artist_name(self):
        """Gets the artist_name of this Artist.  # noqa: E501


        :return: The artist_name of this Artist.  # noqa: E501
        :rtype: str
        """
        return self._artist_name

    @artist_name.setter
    def artist_name(self, artist_name):
        """Sets the artist_name of this Artist.


        :param artist_name: The artist_name of this Artist.  # noqa: E501
        :type: str
        """

        self._artist_name = artist_name

    @property
    def artist_genre(self):
        """Gets the artist_genre of this Artist.  # noqa: E501


        :return: The artist_genre of this Artist.  # noqa: E501
        :rtype: str
        """
        return self._artist_genre

    @artist_genre.setter
    def artist_genre(self, artist_genre):
        """Sets the artist_genre of this Artist.


        :param artist_genre: The artist_genre of this Artist.  # noqa: E501
        :type: str
        """

        self._artist_genre = artist_genre

    @property
    def albums_recorded(self):
        """Gets the albums_recorded of this Artist.  # noqa: E501


        :return: The albums_recorded of this Artist.  # noqa: E501
        :rtype: int
        """
        return self._albums_recorded

    @albums_recorded.setter
    def albums_recorded(self, albums_recorded):
        """Sets the albums_recorded of this Artist.


        :param albums_recorded: The albums_recorded of this Artist.  # noqa: E501
        :type: int
        """

        self._albums_recorded = albums_recorded

    @property
    def username(self):
        """Gets the username of this Artist.  # noqa: E501


        :return: The username of this Artist.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Artist.


        :param username: The username of this Artist.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Artist, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Artist):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
